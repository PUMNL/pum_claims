<?php

function pum_claims_get_roles_who_can_access() {
    return array('Expert', 'Sector Coordinator', 'Country Coordinator', 'Prof', 'Representative');
}

function pum_claims_menu() {
    $items = array();
    $items['portal/new-claim'] = array(
        'title' => 'Submit a new claim',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('pum_claims_form'),
        'access callback' => 'pum_claims_user_has_role',
        'access arguments' => array(pum_claims_get_roles_who_can_access()),
    );
    $items['portal/claims/%'] = array(
        'title' => 'Edit claim',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('pum_claims_edit_form', 2),
        'access callback' => 'pum_claims_user_has_role_and_is_on_activity',
        'access arguments' => array(pum_claims_get_roles_who_can_access(), 2),
    );
    $items['portal/view-claim/%'] = array(
        'title' => 'View claim',
        'page callback' => 'pum_claims_view',
        'page arguments' => array(2),
        'access callback' => 'pum_claims_user_has_role_and_is_on_activity',
        'access arguments' => array(pum_claims_get_roles_who_can_access(), 2),
    );
    $items['portal/claims/%/add-line'] = array(
        'title' => 'Submit a new claim line',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('pum_claims_line_form', 2),
        'access callback' => 'pum_claims_user_has_role_and_is_on_activity',
        'access arguments' => array(pum_claims_get_roles_who_can_access(), 2),
    );
    $items['portal/claims/%/edit-line/%'] = array(
        'title' => 'Edit a claim line',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('pum_claims_line_form', 2, 4),
        'access callback' => 'pum_claims_user_has_role_and_is_on_activity',
        'access arguments' => array(pum_claims_get_roles_who_can_access(), 2),
    );
    $items['portal/claims/%/remove-line/%'] = array(
        'title' => 'Submit a new claim line',
        'page callback' => 'pum_claims_remove_line',
        'page arguments' => array(2, 4),
        'access callback' => 'pum_claims_user_has_role_and_is_on_activity',
        'access arguments' => array(pum_claims_get_roles_who_can_access(), 2),
    );
    $items['portal/claims/%/remove-attachment/%'] = array(
        'title' => 'Remove attachment',
        'page callback' => 'pum_claims_remove_attachment',
        'page arguments' => array(2, 4),
        'access callback' => 'pum_claims_user_has_role_and_is_on_activity',
        'access arguments' => array(pum_claims_get_roles_who_can_access(), 2),
    );
    $items['portal/claims/convert_currency'] = array(
        'title' => 'Convert currency',
        'page callback' => 'pum_claims_convert_currency',
        'page arguments' => array(),
        'access callback' => 'pum_claims_user_has_role',
        'access arguments' => array(pum_claims_get_roles_who_can_access()),
    );
    $items['portal/delete-claim/%'] = array(
        'title' => 'Delete claim',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('pum_claims_removal_form', 2),
        'access callback' => 'pum_claims_user_has_role_and_is_on_activity_and_claim_not_submitted',
        'access arguments' => array(pum_claims_get_roles_who_can_access(), 2),
    );
    return $items;
}

function pum_claims_views_api() {
    return array('api' => 3.0);
}

function pum_claims_views_default_views() {
    $files = file_scan_directory(drupal_get_path('module', 'pum_claims'). '/views', '/.inc/');
    $views = array();
    civicrm_initialize();
    foreach ($files as $filepath => $file) {
        require $filepath;
        if (isset($view)) {
            $views[$view->name] = $view;
        }
    }
    return $views;
}

function _pum_claims_view_show_status($claim_id) {
  //NOTE: Old claims are not migrated yet so we need to take the correct status from 2 places.
  if (!empty($claim_id)) {
    try{
      //With Query (takes 50ms):
      $sql = "SELECT act.id, ov.label AS 'old_claims_status', ov2.label AS 'new_claims_status' FROM civicrm_activity act
              LEFT JOIN civicrm_value_claiminformation_70 ci ON ci.entity_id = act.id
              LEFT JOIN civicrm_option_value ov ON ov.value = act.status_id AND ov.option_group_id = (SELECT id FROM civicrm_option_group og WHERE og.name = 'activity_status')
              LEFT JOIN civicrm_option_value ov2 ON ov2.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'pum_claim_status') AND ov2.value = ci.pum_claim_status
              WHERE act.id = %1
              LIMIT 1";
      $status = CRM_Core_DAO::executeQuery($sql,array(1 => array((int)$claim_id, 'Integer')));
      if ($status->fetch()) {
        if (!empty($status->new_claims_status)) {
          echo $status->new_claims_status;
        } else if (!empty($status->old_claims_status)) {
          echo $status->old_claims_status;
        } else {
          echo "N/A";
        }
      }
    } catch (Exception $ex) {

    }
  }
}

function _pum_claims_view_description($claim_id) {
  try {
    $description = '';

    $sql = "SELECT description_391 AS 'description', ov.label AS 'pum_claim_status' FROM civicrm_value_claiminformation_70 ci
            LEFT JOIN civicrm_option_value ov ON ov.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'pum_claim_status') AND ov.value = ci.pum_claim_status
            WHERE ci.entity_id = %1
            LIMIT 1";
    $claim = CRM_Core_DAO::executeQuery($sql,array(1 => array((int)$claim_id, 'Integer')));
    if ($claim->fetch()) {
      if (($claim->pum_claim_status == 'Waiting For Correction' | $claim->pum_claim_status == 'Rejected') && !empty($claim->description)) {
        $description = $claim->description;
      }
    }

    return $description;
  } catch (Exception $ex) {

  }
}

function _pum_claims_view_edit_claim_link($claim_id) {
    if (pum_claims_is_claim_editable($claim_id)) {
        $url = url('portal/claims/'.$claim_id, array('absolute' => true, 'fragment' => 'edit-lines'));
        echo '<a href="'.$url.'">Edit</a>';
    } else {
        $url = url('portal/view-claim/'.$claim_id, array('absolute' => true));
        echo '<a href="'.$url.'">View</a>';
    }
}

function _pum_claims_delete_claim_link($claim_id) {
    //Only allow deletion if claim is not submitted yet
    if (pum_claims_is_claim_editable($claim_id)) {
        $url = url('portal/delete-claim/'.$claim_id, array('absolute' => true));
        echo '<a href="'.$url.'">Delete</a>';
    }
}

function pum_claims_is_claim_editable($claim_id) {
    $sqlParams = array(1=>array($claim_id, 'Integer'));

    $claims = CRM_Core_DAO::executeQuery("SELECT DISTINCT act.id,cl.approval_contact_id, ov1.label AS 'status_old_claims', ov2.label AS 'status_new_claims'
                                          FROM civicrm_activity act
                                          LEFT JOIN civicrm_activity_contact ac ON ac.activity_id = act.id
                                          LEFT JOIN pum_claim_log cl ON cl.claim_activity_id = act.id
                                          LEFT JOIN civicrm_contact appct ON appct.id = cl.approval_contact_id
                                          LEFT JOIN civicrm_value_claiminformation_70 ci ON ci.entity_id = act.id
                                          LEFT JOIN civicrm_option_value ov1 ON ov1.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'activity_status') AND ov1.value = act.status_id
                                          LEFT JOIN civicrm_option_value ov2 ON ov2.option_group_id = (SELECT id FROM civicrm_option_group WHERE name = 'pum_claim_status') AND ov2.value = ci.pum_claim_status
                                          WHERE act.activity_type_id = (SELECT value FROM civicrm_option_value ov WHERE ov.label = 'Claim' AND ov.option_group_id = (SELECT id FROM civicrm_option_group og WHERE og.name = 'activity_type')) AND act.is_current_revision = 1
                                          AND act.id = %1
                                          ORDER BY act.activity_date_time DESC", $sqlParams);

    //As from July 31, 2017 claims are handled different, so that's why we have an old status (for old claims) and new status (for new claims)
    if ($claims->fetch() && (!empty($claims->status_old_claims) | !empty($claims->status_new_claims))) {
      if($claims->status_old_claims == 'Scheduled' && $claims->status_new_claims == NULL && $claims->approval_contact_id == NULL) {
        //Old claim which is not submitted, so claim should be editable
        return TRUE;
      } elseif(($claims->status_old_claims == 'Scheduled'|$claims->status_old_claims == 'Completed') && $claims->approval_contact_id == NULL) {
        //New claim which is not submitted, so claim should be editable
        return TRUE;
      } else if($claims->status_new_claims == 'Waiting For Correction') {
        //New claim send back for correction, so claim should be editable
        return TRUE;
      } else if($claims->status_new_claims == 'Not submitted') {
        //New claim not submitted, so claim should be editable
        return TRUE;
      } else {
        //In all other cases claim should not be editable
        return FALSE;
      }
    }
    //By default claim is not editable
    return FALSE;
}

function pum_claims_is_claim_approved($claim_id){
    $claim = array();
    try {
      $claim = civicrm_api3('Claim','getsingle',array('id'=>$claim_id));
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }
    $config =  CRM_Expenseclaims_Config::singleton();
    if(!empty($claim['claim_status_id']) && ($claim['claim_status_id']==$config->getInitiallyApprovedClaimStatusValue() || $claim['claim_status_id']==$config->getApprovedClaimStatusValue())) {
      return true;
    } else {
      return false;
    }
}

function pum_claims_get_amount_submitted($claim_id) {
  $lines = CRM_Core_DAO::executeQuery("SELECT * FROM pum_claim_line WHERE activity_id = %1", array(1=>array($claim_id, 'Integer')));
  $totalAmount = 0.00;
  if($lines->N == 0) {
    $totalAmount = CRM_Core_DAO::singleValueQuery(
      "SELECT total_expenses_389 FROM civicrm_value_claiminformation_70 ci LEFT JOIN pum_claim_log cl ON cl.claim_activity_id = ci.entity_id WHERE ci.entity_id = %1",
      array(1=>array($claim_id, 'Integer'))
    );
  } else {
    while ($lines->fetch()) {
      $original_line_amount = $lines->euro_amount;
      $line_log_items = CRM_Core_DAO::executeQuery("SELECT * FROM pum_claim_line_log WHERE claim_line_id = %1 ORDER BY changed_date DESC LIMIT 1", array(1=>array($lines->id, 'Integer')));
      if ($line_log_items->fetch() && isset($line_log_items->old_euro_amount)) {
        $original_line_amount = $line_log_items->old_euro_amount;
      }
      $totalAmount = $totalAmount + $original_line_amount;
    }
  }

  return $totalAmount;
}

function pum_claims_get_amount_approved($claim_id) {
  if (pum_claims_is_claim_editable($claim_id)) {
    return null;
  }
  if(!pum_claims_is_claim_approved($claim_id)){
    return null;
  }

  $totalAmount = 0.00;
  $lines = array();
  $lines = _pum_claims_getClaimLines($claim_id);

  if (empty($lines)) {
    $totalAmount = CRM_Core_DAO::singleValueQuery(
      "SELECT total_expenses_389 FROM civicrm_value_claiminformation_70 ci LEFT JOIN pum_claim_log cl ON cl.claim_activity_id = ci.entity_id WHERE ci.entity_id = %1",
      array(1=>array($claim_id, 'Integer'))
    );
  } else {
    foreach($lines as $line) {
      $totalAmount = $totalAmount + ((float) $line['euro_amount']);
    }
  }

  return $totalAmount;
}

function pum_claims_convert_currency() {
    $currency_id = (int) $_GET['currency_id'];
    $amount = (float) $_GET['amount'];
    $conversion_date = new DateTime($_GET['conversion_date']);
    civicrm_initialize();
    try {
      $result = civicrm_api3('Currency', 'Convert', array('currency_id' => $currency_id, 'amount' => $amount, 'conversion_date' => $conversion_date->format('Ymd')));
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }

    echo number_format($result['euro_amount'], 2, '.', '');

    exit();
}

function pum_claims_form($form, &$form_state) {
    global $user;
    civicrm_initialize();
    try {
      $contact_id = civicrm_api3('UFMatch', 'getvalue', array(
          'uf_id' => $user->uid,
          'return' => 'contact_id'
      ));
      $contact = civicrm_api3('Contact', 'getsingle', array('id' => $contact_id));
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }
    $bankDetails = _pum_claims_getBankDetailsOfContact($contact_id);

    $strBirthDate = '';
    if (!empty($contact['birth_date'])) {
        $dateBirthDate = new DateTime($contact['birth_date']);
        $strBirthDate = $dateBirthDate->format('Y-m-d');
    }

    $claim_types = _pum_claims_getClaimTypes();
    $link_options = _pum_claims_getClaimLinksForContact($contact_id, FALSE); //FALSE: Completed links should not be visible in submit new claim screen
    if(empty( $link_options)) {
     unset($claim_types['project']);
    }

    $form['about_me']['#type'] = 'fieldset';
    $form['about_me']['name']['#markup'] = '<p><strong>Name: </strong>'.$contact['display_name'].'</p>';
    $form['about_me']['birthdate']['#markup'] = '<p><strong>Birth date:</strong> '.$strBirthDate.'</p>';
    $form['about_me']['bank_help']['#markup'] = '<p><em>These are your personal bank details as registered in our system. Are the displayed data incorrect? Please use the form Personal Data under My Profile to correct the information.</em></p>';
    $form['about_me']['bank_name']['#markup'] = '<p><strong>Bank name:</strong> '. $bankDetails['bank'] . '</p>';
    $form['about_me']['bic']['#markup'] = '<p><strong>BIC: </strong> ' . $bankDetails['bic'] . '</p>';
    $form['about_me']['iban']['#markup'] = '<p><strong>IBAN: </strong> ' . $bankDetails['iban'] . '</p>';
    $form['about_me']['type']['#type'] = 'select';
    $form['about_me']['type']['#title'] = 'Claim Role';
    $form['about_me']['type']['#required'] = true;
    $form['about_me']['type']['#options'] = $claim_types;
    $form['about_me']['type']['#description'] = 'Specify as who you submit this claim. E.g. Expert (PUM Main Activity), Sector Coordinator (SC), Country Coordinator (CC), etc.';
    $form['about_me']['link']['#type'] = 'select';
    $form['about_me']['link']['#title'] = 'Main Activity/Case';
    $form['about_me']['link']['#required'] = false;
    $form['about_me']['link']['#options'] = $link_options;
    $form['about_me']['link']['#description'] = 'The activities are related to a Main Activity/Case, please select the specific Main Activity/Case (pull down menu) from the list.';
    $form['about_me']['link']['#states'] = array(
      'visible' => array(
        'select#edit-type' => array('value' => 'project'),
      ),
      'required' => array(
        'select#edit-type' => array('value' => 'project'),
      ),
    );

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Save and continue'),
    );

    return $form;
}

function pum_claims_form_submit($form, &$form_state) {
    global $user;
    civicrm_initialize();
    try {
      $contact_id = civicrm_api3('UFMatch', 'getvalue', array(
          'uf_id' => $user->uid,
          'return' => 'contact_id'
      ));
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }

    $expenseDate = new DateTime();
    $params['expense_date'] = $expenseDate->format("Ymd");
    $params['claim_type'] = $form_state['values']['type'];
    $params['claim_contact_id'] = $contact_id;
    if($params['claim_type']=='project') {
      $params['claim_link'] = $form_state['values']['link'];
    }
    $params['claim_total_amount'] = 0;
    try {
      $result = civicrm_api3('Claim', 'create', $params);
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }
    $claim_id = $result['values']['id'];
    drupal_goto('portal/claims/'.$claim_id, array('fragment' => 'edit-lines'));
}

function pum_claims_removal_form($form, &$form_state, $claim_id) {
    $form = array();
    $form['areyousure'] = array(
      '#markup' => t('<p>'.t('Are you sure you want to delete this claim: '.$claim_id.'?').'</p>')
    );
    $form['submit_yes'] = array(
        '#type' => 'submit',
        '#value' => t('Yes'),
    );
    $form['submit_no'] = array(
        '#type' => 'submit',
        '#value' => t('No'),
    );
    $form['claim_id'] = array(
        '#type' => 'hidden',
        '#value' => $claim_id,
    );
    return $form;
}

function pum_claims_removal_form_submit($form, &$form_state) {
  if (pum_claims_is_claim_editable($form_state['input']['claim_id']) == TRUE) {
    if($form_state['values']['op'] == 'No') {
      //No: return back to claims overview
      drupal_goto('portal/claims');
    }

    if($form_state['values']['op'] == 'Yes') {
      //Yes: remove claim and return back to claims overview
      //This will also remove the claim lines & claim log
      try {
        $remove_claim = civicrm_api3('Claim', 'Delete', array('id' => $form_state['input']['claim_id']));

        if ($remove_claim == TRUE) {
          drupal_set_message('Your claim has been removed','status', FALSE);
          drupal_goto('portal/claims');
        } else {
          //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $remove_claim, TRUE)), WATCHDOG_ERROR,'');
          drupal_set_message('An error occurred while deleting your claim, please contact helpdesk.', 'error', FALSE);
        }
      } catch (CiviCRM_API3_Exception $ex) {
        //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
        drupal_set_message('An error occurred while deleting your claim, please contact helpdesk.', 'error', FALSE);
      }
    }
  } else {
    drupal_set_message('You are not allowed to remove this claim because it has already been submitted','status', FALSE);
    drupal_goto('portal/claims');
  }
}

function pum_claims_view($claim_id) {
    global $user;
    try {
      try {
        civicrm_initialize();
        $contact_id = civicrm_api3('UFMatch', 'getvalue', array(
            'uf_id' => $user->uid,
            'return' => 'contact_id'
        ));
      } catch (CiviCRM_API3_Exception $ex) {
        //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
      }

      drupal_add_js(drupal_get_path('module', 'pum_claims') . '/pum_claims.js');
      drupal_add_css(drupal_get_path('module', 'pum_claims') . '/pum_claims.css');

      try {
        $claim = civicrm_api3('Claim', 'getsingle', array('id' => $claim_id));
      } catch (CiviCRM_API3_Exception $ex) {
        //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
      }
      $attachmentRows = array();
      $attachments = CRM_Core_BAO_File::getEntityFile('civicrm_activity', $claim_id);
      foreach($attachments as $attachment) {
          $attachmentRow = array();
          $attachmentRow[] = $attachment['href'];
          $attachmentRows[] = $attachmentRow;
      }

      $lines = _pum_claims_getClaimLines($claim_id);
      $approved = pum_claims_is_claim_approved($claim_id);
      $lineitemRows = array();
      $totalAmount = 0.00;
      foreach($lines as $line) {
          $amount_submitted = $line['euro_amount'];
          $euro_amount = $line['euro_amount'];
          $euro_amount = 'EUR ' . number_format($euro_amount, 2, '.', '');
          $lineLog = '';
          $lineLogItems = array('values'=>'');
          try {
            $lineLogItems = civicrm_api3('ClaimLineLog', 'get', array('claim_line_id' => $line['id'], 'options' => array('limit' => 0)));
          } catch (CiviCRM_API3_Exception $ex) {
            //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
          }
          foreach ($lineLogItems['values'] as $lineLogItem) {
            $logDate = new DateTime($lineLogItem['changed_date']);
            $lineLog .= '<p>'.$logDate->format('Y-m-d').': '.$lineLogItem['change_reason'].'</p>';
          }
          if (strlen($lineLog)) {
            $euro_amount = '<span class="line-amount-eur">'.$euro_amount.'&nbsp;<span class="helpicon">&nbsp;</span> <div style="display: none;" class="line-log">'.$lineLog.'</div></span>';
          }

          $line_log_items = CRM_Core_DAO::executeQuery("SELECT * FROM pum_claim_line_log WHERE claim_line_id = %1 ORDER BY changed_date DESC LIMIT 1", array(1=>array($line['id'], 'Integer')));
          if ($line_log_items->fetch() && isset($line_log_items->old_euro_amount)) {
            $amount_submitted = $line_log_items->old_euro_amount;
          }

          $lineitemRow = array();
          $lineitemRow[] = $line['expense_date'];
          $lineitemRow[] = $line['expense_type'];
          $lineitemRow[] = $line['currency'] . ' ' . number_format($line['currency_amount'], 2, '.', '');
          $lineitemRow[] = 'EUR '.number_format($amount_submitted, 2, '.', '');
          $lineitemRow[] = $approved ? $euro_amount : null;
          $lineitemRow[] = $line['description'];
          $lineitemRows[] = $lineitemRow;

          $totalAmount = $totalAmount + ((float) $line['euro_amount']);
      }
      try {
        $contact = civicrm_api3('Contact', 'getsingle', array('id' => $contact_id));
      } catch (CiviCRM_API3_Exception $ex) {
        //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
      }
      $bankDetails = _pum_claims_getBankDetailsOfContact($contact_id);

      $strBirthDate = '';
      if (!empty($contact['birth_date'])) {
          $dateBirthDate = new DateTime($contact['birth_date']);
          $strBirthDate = $dateBirthDate->format('Y-m-d');
      }

      $claim_types = _pum_claims_getClaimTypes();
      $link_options = _pum_claims_getClaimLinksForContact($contact_id, TRUE); //TRUE: Completed links should be visible in view claim screen

      if(empty($link_options)){
         unset($claim_types['project']);
      }

      $form = array();
      $form['about_me']['#type'] = 'fieldset';
      $form['about_me']['name']['#markup'] = '<p><strong>Name: </strong>'.$contact['display_name'].'</p>';
      $form['about_me']['birthdate']['#markup'] = '<p><strong>Birth date:</strong> '.$strBirthDate.'</p>';
      $form['about_me']['bank_name']['#markup'] = '<p><strong>Bank name:</strong> '.$bankDetails['bank'].'</p>';
      $form['about_me']['bic']['#markup'] = '<p><strong>BIC:</strong> '.$bankDetails['bic'].'</p>';
      $form['about_me']['iban']['#markup'] = '<p><strong>IBAN:</strong> '.$bankDetails['iban'].'</p>';
      $form['about_me']['type']['#markup'] = '<p><strong>Claim Role:</strong> '.$claim_types[$claim['claim_type_id']].'</p>';
      if(isset($claim['claim_linked_to'])) {
        $form['about_me']['link']['#markup'] = '<p><strong>Link:</strong> ' . $link_options[$claim['claim_linked_to']] . '</p>';
      }
      if(isset($claim['claim_description'])) {
        $form['about_me']['description']['#markup'] = '<p><strong>Remark:</strong> ' . _pum_claims_view_description($claim_id) . '</p>';
      }

      $form['lines']['#type'] = 'fieldset';
      $form['lines']['#title'] = 'My expenses';

      if (count($lineitemRows)) {
          $form['lines']['table']['#theme'] = 'table';
          $form['lines']['table']['#header'] = array(
              'Date',
              'Expense type',
              'Amount',
              'Amount submitted',
              'Amount approved',
              'Remark',
          );
          $form['lines']['table']['#attributes'] = array('width' => '100%');
          $form['lines']['table']['#rows'] = $lineitemRows;
          $form['lines']['total']['#markup'] = '<strong>Total: </strong>EUR '.number_format($totalAmount, 2, '.', '');
      }

      $form['attachments']['#type'] = 'fieldset';
      $form['attachments']['#title'] = 'My attachments (invoices, train tickets etc.)';

      if (count($attachmentRows)) {
          $form['attachments']['table']['#theme'] = 'table';
          $form['attachments']['table']['#rows'] = $attachmentRows;
          $form['attachments']['table']['#attributes'] = array('width' => '100%');
      }
    } catch (Exception $ex) {
      drupal_set_message('Unable to retrieve claim information, please contact helpdesk', 'error', FALSE);
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }

    return $form;
}

function pum_claims_edit_form($form, &$form_state, $claim_id) {
    global $user;

    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }

    drupal_add_js(drupal_get_path('module', 'pum_claims') . '/pum_claims.js');
    drupal_add_css(drupal_get_path('module', 'pum_claims') . '/pum_claims.css');

    try {
      civicrm_initialize();
      $contact_id = civicrm_api3('UFMatch', 'getvalue', array(
          'uf_id' => $user->uid,
          'return' => 'contact_id'
      ));

      $claim = civicrm_api3('Claim', 'getsingle', array('id' => $claim_id));
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }

    $attachmentRows = array();
    $attachments = CRM_Core_BAO_File::getEntityFile('civicrm_activity', $claim_id);
    foreach($attachments as $attachment) {
        $removeLink = '<a href="'.url('portal/claims/'.$claim_id.'/remove-attachment/'.$attachment['fileID'], array('absolute' => true)).'">Remove</a>';
        $attachmentRow = array();
        $attachmentRow[] = $attachment['href'];
        $attachmentRow[] = $removeLink;
        $attachmentRows[] = $attachmentRow;
    }

    $lines = _pum_claims_getClaimLines($claim_id);
    $lineitemRows = array();
    $totalAmount = 0.00;
    foreach($lines as $line) {
        $editLink = '<a href="'.url('portal/claims/'.$claim_id.'/edit-line/'.$line['id']).'" title="Through this button you enter the sequel screen and you can customize the data entered">Edit</a>';
        $removeLink = '<a href="'.url('portal/claims/'.$claim_id.'/remove-line/'.$line['id']).'" title="Through this button you can delete the imported rule">Remove</a>';

        $lineitemRow = array();
        $lineitemRow[] = $line['expense_date'];
        $lineitemRow[] = $line['expense_type'];
        $lineitemRow[] = $line['currency'];
        $lineitemRow[] = $line['currency_amount'];
        $lineitemRow[] = $line['euro_amount'];
        $lineitemRow[] = $line['description'];
        $lineitemRow[] = $editLink.'&nbsp;'.$removeLink;
        $lineitemRows[] = $lineitemRow;

        $totalAmount = $totalAmount + ((float) $line['euro_amount']);
    }
    try {
      $contact = civicrm_api3('Contact', 'getsingle', array('id' => $contact_id));
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }
    $bankDetails = _pum_claims_getBankDetailsOfContact($contact_id);

    $strBirthDate = '';
    if (!empty($contact['birth_date'])) {
        $dateBirthDate = new DateTime($contact['birth_date']);
        $strBirthDate = $dateBirthDate->format('Y-m-d');
    }

    $claim_types = _pum_claims_getClaimTypes();
    $link_options = _pum_claims_getClaimLinksForContact($contact_id, FALSE); //FALSE: Completed links should not be visible in edit new claim screen
    if(empty($link_options)){
       unset($claim_types['project']);
    }

    $form['claim_id']['#type'] = 'hidden';
    $form['claim_id']['#value'] = $claim_id;

    $form['about_me']['#type'] = 'fieldset';
    $form['about_me']['name']['#markup'] = '<p><strong>Name: </strong>'.$contact['display_name'].'</p>';
    $form['about_me']['birthdate']['#markup'] = '<p><strong>Birth date:</strong> '.$strBirthDate.'</p>';
    $form['about_me']['bank_help']['#markup'] = '<p><em>These are your personal bank details as registered in our system. Are the displayed data incorrect? Please use the form Personal Data under My Profile to correct the information.</em></p>';
    $form['about_me']['bank_name']['#markup'] = '<p><strong>Bank name:</strong> '. $bankDetails['bank'] . '</p>';
    $form['about_me']['bic']['#markup'] = '<p><strong>BIC: </strong> ' . $bankDetails['bic'] . '</p>';
    $form['about_me']['iban']['#markup'] = '<p><strong>IBAN: </strong> ' . $bankDetails['iban'] . '</p>';
    $form['about_me']['type']['#type'] = 'select';
    $form['about_me']['type']['#title'] = 'Claim Role';
    $form['about_me']['type']['#required'] = true;
    $form['about_me']['type']['#default_value'] = $claim['claim_type_id'];
    $form['about_me']['type']['#options'] = $claim_types;
    $form['about_me']['type']['#description'] = 'Specify as who you submit this claim. E.g. Expert (PUM Main Activity), Sector Coordinator (SC), Country Coordinator (CC), etc.';

    $form['about_me']['link']['#type'] = 'select';
    $form['about_me']['link']['#title'] = 'Main Activity/Case';
    if($claim['claim_type_id']=='project') {
      $form['about_me']['link']['#default_value'] = $claim['claim_linked_to'];
    }
    $form['about_me']['link']['#options'] = $link_options;
    $form['about_me']['link']['#description'] = 'The activities are related to a Main Actity/Case, please select the specific Main/Activity (pull down menu) from the list.';
    $form['about_me']['link']['#states'] = array(
      'visible' => array(
        'select#edit-type' => array('value' => 'project'),
      ),
      'required' => array(
        'select#edit-type' => array('value' => 'project'),
      ),
    );

    $form['lines']['#type'] = 'fieldset';
    $form['lines']['#title'] = 'My expenses';
    drupal_add_css(drupal_get_path('module', 'pum_claims') . '/pum_claims.css');
    if(!empty($claim['claim_description']) && $claim['claim_status'] == 'Waiting For Correction') {
      $form['lines']['remark']['#markup'] = '<div id="pum-claims-remark"><strong>Remark:</strong> <div id="pum-claims-remark-description">' . $claim['claim_description'] . '</div></div>';
    }

    $form['lines']['explanation']['#markup'] = '<div class="description_text"><p>Please click on \'Add expense line\' to add your expenses. For each line add a description what your expense is about. For every expense type use a separate line. <span class="helpbutton"></span></p><div id="description_help" style="display:none;"><p>Please use the button to add expense lines: For every expense type please add the correct line of expense type using the sequel screen.
Per line add in the description information of what you claim is about; for instance: Cost center, 30km one way trip, Haarlem to Den Haag, visit Ethiek Commissie
Please start every description with cost center if applicable. For information please consult the manual or contact our Finance & Control department</p></div>';
    $form['lines']['new-line']['#type'] = 'markup';
    $form['lines']['new-line']['#markup'] = '<p><a href="/portal/claims/'.$claim_id.'/add-line" class="button" title="Through this button you enter the sequel screen, in which you can enter a line.">Add expense line</a></p>';

    if (count($lineitemRows)) {
        $form['lines']['table']['#theme'] = 'table';
        $form['lines']['table']['#header'] = array(
            'Date',
            'Expense type',
            'Currency',
            'Amount',
            'Amount EUR',
            'Description',
            '',
        );
        $form['lines']['table']['#attributes'] = array('width' => '100%');
        $form['lines']['table']['#rows'] = $lineitemRows;
        $form['lines']['total']['#markup'] = '<strong>Total: </strong>EUR '.number_format($totalAmount, 2, '.', '');
    }

    $form['attachments']['#type'] = 'fieldset';
    $form['attachments']['#title'] = 'My attachments (invoices, train tickets etc.)';
    if (count($attachmentRows)) {
        $form['attachments']['table']['#theme'] = 'table';
        $form['attachments']['table']['#rows'] = $attachmentRows;
        $form['attachments']['table']['#attributes'] = array('width' => '100%');
    }
    $form['attachments']['upload']['#prefix'] = '<div class="upload">';
    $form['attachments']['upload']['#suffix'] = '</div>';
    $form['attachments']['upload']['explanation']['#markup'] = '<p class="description">Please upload one or more attachments. You can upload multiple files by individually uploading the files.</p>';
    $form['attachments']['upload']['file']['#title'] = t('File');
    $form['attachments']['upload']['file']['#type'] = 'file';
    $form['attachments']['upload']['file']['#required'] = FALSE;
    $form['attachments']['upload']['file']['#description'] = "Via this button files (attachments) can be selected which you would like to add to the Claim. Use the button 'Upload' to attach each file";
    $form['attachments']['upload']['button']['#type'] = 'submit';
    $form['attachments']['upload']['button']['#value'] = 'Upload';
    $form['attachments']['upload']['button']['#submit'] = array('pum_claims_form_submit_attachments');
    $form['attachments']['upload']['button']['#validate'] = array();
    $form['attachments']['upload']['button']['#attributes']['title'] = "Via this button files (attachments) can be selected which you would like to add to the Claim. Use the button 'Upload' to attach each file";

    $form['about_me']['save_button'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('pum_claims_edit_form_submit_save'),
    '#attributes' => array(
      'title' => 'Via this button the entered data is only stored',
      ),
    );

    $form['agree']['#type'] = 'fieldset';
    $form['agree']['#title'] = 'Final Submit';
    $form['agree']['agree']['#markup'] = '<p class="description">By submitting this claim, I declare that I have filled out all items fully, truthfully and with all possible attachments.</p>';

    $form['agree']['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#submit' => array('pum_claims_edit_form_submit_save','pum_claims_edit_form_submit_submit'),
        '#validate' => array('pum_claims_edit_form_submit_submit_validate'),
        '#attributes' => array(
          'title' => 'Via this button the entered data is stored and forwarded for approval',
        ),
    );
    return $form;
}

function pum_claims_edit_form_submit_save($form, &$form_state) {
    global $user;

    $claim_id = $form_state['values']['claim_id'];
    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }

    try {
      civicrm_initialize();
      $contact_id = civicrm_api3('UFMatch', 'getvalue', array(
          'uf_id' => $user->uid,
          'return' => 'contact_id'
      ));
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }

    $expenseDate = new DateTime();
    if ($claim_id) {
        $params['id'] = $claim_id;
    }

    $params['expense_date'] = $expenseDate->format("Ymd");
    $params['claim_type'] = $form_state['values']['type'];
    $params['claim_contact_id'] = $contact_id;
    /* only a project needs a claim link */
    if($params['claim_type']=='project') {
      $params['claim_link'] = $form_state['values']['link'];
    }
    $params['claim_total_amount'] = 0;
    try{
      $result = civicrm_api3('Claim', 'create', $params);
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }
    //drupal_goto('portal/claims');
    //drupal_goto('portal/claims/'.$claim_id);
}

function pum_claims_edit_form_submit_submit($form, &$form_state) {
  try {
    //Submit claim
    $params = array('id' => $form_state['values']['claim_id']);
    $result = civicrm_api3('Claim', 'submit', $params);
    $claim = $result['values'];
    //Send E-mail to contact
    $session = CRM_Core_Session::singleton();
    $contact_id = $session->get('userID');

    $params_template = array('msg_title' => 'claim_received');
    $result_template = civicrm_api3('MessageTemplate', 'get', $params_template);

    if($result['is_error'] == 0) {

      $mailer = CRM_Expenseclaims_Mail::singleton();
      $mailer->sendEmail($claim, $contact_id, $result_template['id']);
    }
  } catch (CiviCRM_API3_Exception $ex) {
    //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
  }
  drupal_goto('portal/claims');
}

function pum_claims_edit_form_submit_submit_validate($form, &$form_state){
  civicrm_initialize();
  $claim_id = $form_state['values']['claim_id'];
  $sqlParams[1] = array($claim_id, 'Integer');
  $countProcessed = CRM_Core_DAO::singleValueQuery("SELECT COUNT(1) FROM pum_claim_line WHERE activity_id = %1", $sqlParams);
  if($countProcessed==0) {
    form_set_error('lines', 'An expense claim needs to have at least one line');
  }
}

function pum_claims_form_submit_attachments($form, &$form_state) {
    $claim_id = $form_state['values']['claim_id'];
    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }

    civicrm_initialize();
    $file = file_save_upload('file', array(
        'file_validate_extensions' => array('gif png jpg jpeg txt rtf odf pdf doc docx ppt pptx xls xlsx'),
        'file_validate_size' => array(10*1024*1024),
    ));
    if ($file) {
        $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
        $filepath = $wrapper->realpath();
        pum_claims_copy_file_to_activity($filepath, $file->filemime, $claim_id);
    }

    drupal_goto('portal/claims/'.$claim_id, array('fragment' => 'edit-lines'));
}

function pum_claims_remove_attachment($claim_id, $file_id) {
    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }
    civicrm_initialize();
    CRM_Core_BAO_File::deleteEntityFile('civicrm_activity', $claim_id, NULL, $file_id);
    drupal_goto('portal/claims/'.$claim_id, array('fragment' => 'edit-lines'));
}

function pum_claims_copy_file_to_activity($file, $mimeType, $activity_id) {
    $config = CRM_Core_Config::singleton();

    $path = explode('/', $file);
    $filename = $path[count($path) - 1];
    $directoryName = $config->customFileUploadDir;
    CRM_Utils_File::createDir($directoryName);

    if (!copy($file, $directoryName . DIRECTORY_SEPARATOR . $filename)) {
        throw new CRM_Documents_Exception_FileCopy('Could not copy file from '.$file.' to '.$directoryName . DIRECTORY_SEPARATOR . $filename);
    }

    $entityTable = 'civicrm_activity';
    $entityID = $activity_id;

    list($sql, $params) = CRM_Core_BAO_File::sql($entityTable, $entityID, 0);

    $dao = CRM_Core_DAO::executeQuery($sql, $params);
    $dao->fetch();

    $fileDAO = new CRM_Core_DAO_File();
    $op = 'create';
    if (isset($dao->cfID) && $dao->cfID) {
        $op = 'edit';
        $fileDAO->id = $dao->cfID;
        unlink($directoryName . DIRECTORY_SEPARATOR . $dao->uri);
    }

    $fileDAO->uri = $filename;
    $fileDAO->mime_type = $mimeType;
    $fileDAO->upload_date = date('Ymdhis');
    $fileDAO->save();

    // need to add/update civicrm_entity_file
    $entityFileDAO = new CRM_Core_DAO_EntityFile();
    if (isset($dao->cefID) && $dao->cefID) {
        $entityFileDAO->id = $dao->cefID;
    }
    $entityFileDAO->entity_table = $entityTable;
    $entityFileDAO->entity_id = $entityID;
    $entityFileDAO->file_id = $fileDAO->id;
    $entityFileDAO->save();

    // lets call the post hook here so attachments code can do the right stuff
    CRM_Utils_Hook::post($op, 'File', $fileDAO->id, $fileDAO);
}

function pum_claims_line_form($form, &$form_state, $claim_id, $line_id=false) {

    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }

    drupal_add_js(array('pum_claims' => array('currencyConvertUrl' => url('portal/claims/convert_currency'))), 'setting');
    drupal_add_js(drupal_get_path('module', 'pum_claims') . '/pum_claims.js');
    drupal_add_css(drupal_get_path('module', 'pum_claims') . '/pum_claims.css');

    civicrm_initialize();

    //#3916: Voorschotten should not be selectable for new claims
    $line_types = _pum_claims_getClaimLineTypes();
    $key_voorschotten = array_search('Voorschotten', $line_types);
    unset($line_types[$key_voorschotten]);

    $currencies = _pum_claims_get_civicrm_currencies();

    $line = array();
    $line['expense_date'] = '';
    $line['currency_id'] = null;
    $line['currency_amount'] = '';
    $line['euro_amount'] = '0.00';
    $line['description'] = '';
    $line['expense_type'] = null;
    if ($line_id) {
        $line = civicrm_api3('ClaimLine', 'getsingle', array('id' => $line_id));
        $expenseDate = new DateTime($line['expense_date']);
        $line['expense_date'] = $expenseDate->format('Y-m-d');
    }

    $form['claim_id']['#type'] = 'hidden';
    $form['claim_id']['#value'] = $claim_id;

    $form['line_id']['#type'] = 'hidden';
    $form['line_id']['#value'] = $line_id;

    $form['line']['#type'] = 'fieldset';
    $form['line']['expense_date']['#type'] = 'date_popup';
    $form['line']['expense_date']['#title'] = 'Date expense incurred';
    $form['line']['expense_date']['#date_label_position'] = 'before';
    $form['line']['expense_date']['#required'] = TRUE;
    $form['line']['expense_date']['#date_format'] = 'Y-m-d';
    $form['line']['expense_date']['#date_increment'] = 1;
    $form['line']['expense_date']['#date_year_range'] = '-2:0';
    $form['line']['expense_date']['#datepicker_options']['maxDate'] = '+0d';
    $form['line']['expense_date']['#default_value'] = $line['expense_date'];
    $form['line']['expense_date']['#description'] = 'On the basis of a calendar, select the date on which the expenditure occurred.';

    $form['line']['type']['#type'] = 'select';
    $form['line']['type']['#title'] = 'Claim line type';
    $form['line']['type']['#required'] = true;
    $form['line']['type']['#options'] = $line_types;
    $form['line']['type']['#default_value'] = $line['expense_type'];
    $form['line']['type']['#description'] = 'The claim line type is used to categorize the costs for administrative purposes. Please make a selection from the options in the pull-down menu.';

    $form['line']['currency']['#type'] = 'select';
    $form['line']['currency']['#title'] = 'Currency';
    $form['line']['currency']['#required'] = true;
    $form['line']['currency']['#options'] = $currencies;
    $form['line']['currency']['#default_value'] = $line['currency_id'];
    $form['line']['currency']['#description'] = 'Please make a selection from the options in the pull-down menu.';

    $form['line']['amount']['#type'] = 'textfield';
    $form['line']['amount']['#title'] = 'Amount (in currency)';
    $form['line']['amount']['#required'] = true;
    $form['line']['amount']['#default_value'] = $line['currency_amount'];
    $form['line']['amount']['#description'] = 'Enter the amount of the note with a dot (.) as decimal seperator, in the respective currency';

    $form['line']['eur_amount']['#markup'] = '<p>Amount in EUR: <span id="euro-amount">'.number_format($line['euro_amount'], 2, '.', '').'</span></p>';

    $form['line']['description']['#type'] = 'textfield';
    $form['line']['description']['#title'] = 'Description';
    $form['line']['description']['#required'] = true;
    $form['line']['description']['#default_value'] = $line['description'];
    $form['line']['description']['#description'] = 'Please enter a short description of the expenditure occurred';

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
    );

    $form['#validate'][] = 'pum_claims_line_form_validate';

    return $form;
}

function pum_claims_line_form_validate($form, &$form_state) {
    try {
      $types = _pum_claims_getClaimLineTypes();
      $key_voorschotten = array_search('Voorschotten', $types);

      if($form_state['values']['type'] == $key_voorschotten && (!is_int((int)$form_state['values']['amount']) | $form_state['values']['amount'] > 0)) {
        form_set_error('amount', 'Amount for claim line type "Voorschotten" should be a negative value put a dash (-) before the number');
      }

      $expense_date = new DateTime($form_state['values']['expense_date']);
      $now = new DateTime();
      if ($expense_date > $now) {
        form_set_error('expense_date', 'You cannot enter an expense line in the future.');
      }

      if(!is_numeric($form_state['values']['amount'])) {
        form_set_error('amount', 'Amount must be set with a dot (.) as decimal seperator');
      }
      /* on an empty expense_date an error is thrown
         here we ignore it. Then the required expense date rule fires
         fix issue #104 (Smit)
      */
    } catch (Exception $e){}
}

function pum_claims_line_form_submit($form, &$form_state) {
    $line_id = $form_state['values']['line_id'];
    $claim_id = $form_state['values']['claim_id'];
    $expenseDate = new DateTime($form_state['values']['expense_date']);
    $params = array();
    if ($line_id) {
        $params['id'] = $line_id;
    }

    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }
    try {
      $result = civicrm_api3('Currency', 'Convert', array(
          'currency_id' => $form_state['values']['currency'],
          'amount' => $form_state['values']['amount'],
          'conversion_date' => $expenseDate ->format('Ymd')
      ));
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }

    $params['activity_id'] = $claim_id;
    $params['expense_date'] = $expenseDate->format('Ymd');
    $params['currency_id'] = $form_state['values']['currency'];
    $params['currency_amount'] = $form_state['values']['amount'];
    $params['euro_amount'] = $result['euro_amount'];
    $params['description'] = $form_state['values']['description'];
    $params['expense_type'] = $form_state['values']['type'];
    $params['exchange_rate'] = $result['exchange_rate'];
    try {
      civicrm_api3('ClaimLine', 'create', $params);
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }
    drupal_goto('portal/claims/'.$claim_id, array('fragment' => 'edit-lines'));
}

function pum_claims_remove_line($claim_id, $line_id) {
    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }

    civicrm_initialize();
    try {
      $result = civicrm_api3('ClaimLine', 'Delete', array('id' => $line_id));
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }
    drupal_goto('portal/claims/'.$claim_id, array('fragment' => 'edit-lines'));
}


/**
 * Check whether a drupal user has a certain role.
 *
 * @param array $roles
 * @return bool
 */
function pum_claims_user_has_role($roles = array())
{
    global $user;
    if (in_array('administrator', $user->roles)) {
        return TRUE;
    }
    foreach ($roles as $role) {
        if (in_array($role, $user->roles)) {
            return TRUE;
        }
    }
    return FALSE;
}

/**
 * Returns true when a user is the source contact of the activity.
 *
 * @param $activity_id
 * @return bool
 */
function pum_claims_user_has_role_on_activity($activity_id) {
  civicrm_initialize();
  $session = CRM_Core_Session::singleton();
  $contact_id = $session->get('userID');
  try{
    $activity = civicrm_api3('Activity', 'getsingle', array('id' => $activity_id));
  } catch (CiviCRM_API3_Exception $ex) {
    //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
  }
  if (!empty($activity['source_contact_id']) && $activity['source_contact_id'] == $contact_id) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * Returns true when the user has a certain drupal role and is connected to the
 * activity
 *
 * @param $roles
 * @param $activity_id
 * @return bool
 */
function pum_claims_user_has_role_and_is_on_activity($roles, $activity_id) {
  if (!pum_claims_user_has_role($roles)) {
    return FALSE;
  }
  if (!pum_claims_user_has_role_on_activity($activity_id)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Returns true when the user has a certain drupal role and is connected to the
 * activity and the claim is not submitted yet
 *
 * @param $roles
 * @param $activity_id
 * @return bool
 */
function pum_claims_user_has_role_and_is_on_activity_and_claim_not_submitted($roles, $activity_id) {
  if (!pum_claims_user_has_role($roles)) {
    return FALSE;
  }
  if (!pum_claims_user_has_role_on_activity($activity_id)) {
    return FALSE;
  }
  if(!pum_claims_is_claim_editable($activity_id)) {
    return FALSE;
  }
  return TRUE;
}

function pum_claims_get_role_ids($roles) {
    $rids = array();
    $available_roles = user_roles();
    foreach($roles as $role) {
        $rid = array_search($role, $available_roles);
        if ($rid !== false) {
            $rids[$rid] = $rid;
        }
    }

    return $rids;
}

function _pum_claims_get_civicrm_currencies() {
    $return = array();
    $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_currency ORDER BY name ASC");
    while ($dao->fetch()) {
        $return[$dao->id] = $dao->name;
    }
    return $return;
}

function _pum_claims_getClaimLineTypes() {
    $types = array();

    $result = civicrm_api3('OptionValue', 'get', array('option_group_id' => 'pum_claim_line_type', 'option.limit' => 0));
    foreach($result['values'] as $value) {
        $types[$value['value']] = $value['label'];
    }
    return $types;
}

function _pum_claims_getClaimTypes() {
    $types = array();

    $result = civicrm_api3('OptionValue', 'get', array('option_group_id' => 'pum_claim_type', 'option.limit' => 0));
    foreach($result['values'] as $value) {
        $types[$value['value']] = $value['label'];
    }
    return $types;
}

/**
 * Find all cases in which the contact has a role.
 * Returns the contact number and a label/description for the case
 *
 * @param int $contact_id
 * @return array
 */
function _pum_claims_getClaimLinksForContact($contact_id, $manageClaim=FALSE) {
    return CRM_Expenseclaims_Utils::getClaimLinksForContact($contact_id, $manageClaim);
}

/**
 * Returns all the claim lines for this claim
 *
 * @param $claim_id
 * @return array
 */
function _pum_claims_getClaimLines($claim_id) {
    $lines = array();
    $currencies = _pum_claims_get_civicrm_currencies();
    $types = _pum_claims_getClaimLineTypes();
    try {
      $result = civicrm_api3('ClaimLine', 'get', array('activity_id' => $claim_id, 'option.limit' => 0));
      foreach($result['values'] as $line) {
          $line['currency'] = $currencies[$line['currency_id']];
          $line['expense_type'] = $types[$line['expense_type']];
          $lines[] = $line;
      }
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }
    return $lines;
}

function _pum_claims_updateBankDetailsOfContact($contact_id, $bank, $iban, $bic) {
    $bankInformationCustomGroup = civicrm_api3('CustomGroup', 'getsingle', array('name' => 'Bank_Information'));
    $bankInformationCustomGroupId = $bankInformationCustomGroup['id'];
    $bankNameCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'Bank_Name', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));
    $IBANCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'IBAN_nummer', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));
    $BICCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'BIC_Swiftcode', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));

    $params['id'] = $contact_id;
    $params['custom_'.$bankNameCustomFieldId] = $bank;
    $params['custom_'.$IBANCustomFieldId] = $iban;
    $params['custom_'.$BICCustomFieldId] = $bic;

    try {
      civicrm_api3('Contact', 'create', $params);
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }
}

function _pum_claims_getBankDetailsOfContact($contact_id) {
    try {
      $bankInformationCustomGroup = civicrm_api3('CustomGroup', 'getsingle', array('name' => 'Bank_Information'));
      $bankInformationCustomGroupId = $bankInformationCustomGroup['id'];
      $bankNameCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'Bank_Name', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));
      $IBANCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'IBAN_nummer', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));
      $BICCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'BIC_Swiftcode', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));

      $contact = civicrm_api3('Contact', 'getsingle', array(
          'id' => $contact_id,
          'return' => array('custom_'.$bankNameCustomFieldId, 'custom_'.$IBANCustomFieldId, 'custom_'.$BICCustomFieldId),
      ));
    } catch (CiviCRM_API3_Exception $ex) {
      //watchdog(basename(__FILE__), '<pre>@print_r</pre>', array('@print_r', print_r( $ex, TRUE)), WATCHDOG_ERROR,'');
    }

    $return['bank'] = '';
    $return['iban'] = '';
    $return['bic'] = '';
    if (isset($contact['custom_'.$bankNameCustomFieldId])) {
        $return['bank'] = $contact['custom_'.$bankNameCustomFieldId];
    }
    if (isset($contact['custom_'.$IBANCustomFieldId])) {
        $return['iban'] = $contact['custom_'.$IBANCustomFieldId];
    }
    if (isset($contact['custom_'.$BICCustomFieldId])) {
        $return['bic'] = $contact['custom_'.$BICCustomFieldId];
    }

    return $return;
}