<?php

function pum_claims_get_roles_who_can_access() {
    return array('Expert', 'Sector Coordinator', 'Country Coordinator', 'Prof', 'Representative');
}

function pum_claims_menu() {
    $items = array();
    $items['portal/new-claim'] = array(
        'title' => 'Submit a new claim',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('pum_claims_form'),
        'access callback' => 'pum_claims_user_has_role',
        'access arguments' => array(pum_claims_get_roles_who_can_access()),
    );
    $items['portal/claims/%'] = array(
        'title' => 'Edit claim',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('pum_claims_edit_form', 2),
        'access callback' => 'pum_claims_user_has_role',
        'access arguments' => array(pum_claims_get_roles_who_can_access()),
    );
    $items['portal/view-claim/%'] = array(
        'title' => 'View claim',
        'page callback' => 'pum_claims_view',
        'page arguments' => array(2),
        'access callback' => 'pum_claims_user_has_role',
        'access arguments' => array(pum_claims_get_roles_who_can_access()),
    );
    $items['portal/claims/%/add-line'] = array(
        'title' => 'Submit a new claim line',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('pum_claims_line_form', 2),
        'access callback' => 'pum_claims_user_has_role',
        'access arguments' => array(pum_claims_get_roles_who_can_access()),
    );
    $items['portal/claims/%/edit-line/%'] = array(
        'title' => 'Edit a claim line',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('pum_claims_line_form', 2, 4),
        'access callback' => 'pum_claims_user_has_role',
        'access arguments' => array(pum_claims_get_roles_who_can_access()),
    );
    $items['portal/claims/%/remove-line/%'] = array(
        'title' => 'Submit a new claim line',
        'page callback' => 'pum_claims_remove_line',
        'page arguments' => array(2, 4),
        'access callback' => 'pum_claims_user_has_role',
        'access arguments' => array(pum_claims_get_roles_who_can_access()),
    );
    $items['portal/claims/%/remove-attachment/%'] = array(
        'title' => 'Remove attachment',
        'page callback' => 'pum_claims_remove_attachment',
        'page arguments' => array(2, 4),
        'access callback' => 'pum_claims_user_has_role',
        'access arguments' => array(pum_claims_get_roles_who_can_access()),
    );
    $items['portal/claims/convert_currency'] = array(
        'title' => 'Convert currency',
        'page callback' => 'pum_claims_convert_currency',
        'page arguments' => array(),
        'access callback' => 'pum_claims_user_has_role',
        'access arguments' => array(pum_claims_get_roles_who_can_access()),
    );
    return $items;
}

function pum_claims_views_api() {
    return array('api' => 3.0);
}

function pum_claims_views_default_views() {
    $files = file_scan_directory(drupal_get_path('module', 'pum_claims'). '/views', '/.inc/');
    $views = array();
    civicrm_initialize();
    foreach ($files as $filepath => $file) {
        require $filepath;
        if (isset($view)) {
            $views[$view->name] = $view;
        }
    }
    return $views;
}

function _pum_claims_view_edit_claim_link($claim_id) {
    if (pum_claims_is_claim_editable($claim_id)) {
        $url = url('portal/claims/'.$claim_id, array('absolute' => true, 'fragment' => 'edit-lines'));
        echo '<a href="'.$url.'">Edit</a>';
    } else {
        $url = url('portal/view-claim/'.$claim_id, array('absolute' => true));
        echo '<a href="'.$url.'">View</a>';
    }
}

function pum_claims_is_claim_editable($claim_id) {

    civicrm_initialize();
    $sqlParams[1] = array($claim_id, 'Integer');
    $countProcessed = CRM_Core_DAO::singleValueQuery("SELECT COUNT(*) FROM pum_claim_log WHERE claim_activity_id = %1", $sqlParams);
    if ($countProcessed) {
        return false;
    } else {
      return true;
    }
}

function pum_claims_is_claim_approved($claim_id){

    civicrm_initialize();
    $claim = civicrm_api3('Claim','getsingle',array('id'=>$claim_id));
    $config =  CRM_Expenseclaims_Config::singleton();
    if($claim['claim_status_id']==$config->getInitiallyApprovedClaimStatusValue()|| $claim['claim_status_id']==$config->getApprovedClaimStatusValue()){
      return true;
    } else {
      return false;
    }
}

function pum_claims_get_amount_submitted($claim_id) {
  $lines = CRM_Core_DAO::executeQuery("SELECT * FROM pum_claim_line WHERE activity_id = %1", array(1=>array($claim_id, 'Integer')));
  $original_amount = 0.00;
  while ($lines->fetch()) {
    $original_line_amount = $lines->euro_amount;
    $line_log_items = CRM_Core_DAO::executeQuery("SELECT * FROM pum_claim_line_log WHERE claim_line_id = %1 ORDER BY changed_date DESC LIMIT 1", array(1=>array($lines->id, 'Integer')));
    if ($line_log_items->fetch() && isset($line_log_items->old_euro_amount)) {
      $original_line_amount = $line_log_items->old_euro_amount;
    }
    $original_amount = $original_amount + $original_line_amount;
  }
  return $original_amount;
}

function pum_claims_get_amount_approved($claim_id) {
  if (pum_claims_is_claim_editable($claim_id)) {
    return null;
  }
  if(!pum_claims_is_claim_approved($claim_id)){
    return null;
  }

  $lines = _pum_claims_getClaimLines($claim_id);
  $totalAmount = 0.00;
  foreach($lines as $line) {
    $totalAmount = $totalAmount + ((float) $line['euro_amount']);
  }
  return $totalAmount;
}

function pum_claims_convert_currency() {
    $currency_id = (int) $_GET['currency_id'];
    $amount = (float) $_GET['amount'];
    $conversion_date = new DateTime($_GET['conversion_date']);
    civicrm_initialize();
    $result = civicrm_api3('Currency', 'Convert', array('currency_id' => $currency_id, 'amount' => $amount, 'conversion_date' => $conversion_date->format('Ymd')));
    echo number_format($result['euro_amount'], 2, ',', '.');
    exit();
}

function pum_claims_form($form, &$form_state) {
    global $user;
    civicrm_initialize();
    $contact_id = civicrm_api3('UFMatch', 'getvalue', array(
        'uf_id' => $user->uid,
        'return' => 'contact_id'
    ));
    $contact = civicrm_api3('Contact', 'getsingle', array('id' => $contact_id));
    $bankDetails = _pum_claims_getBankDetailsOfContact($contact_id);

    $strBirthDate = '';
    if (!empty($contact['birth_date'])) {
        $dateBirthDate = new DateTime($contact['birth_date']);
        $strBirthDate = $dateBirthDate->format('Y-m-d');
    }

    $claim_types = _pum_claims_getClaimTypes();
    $link_options = _pum_claims_getClaimLinksForContact($contact_id);

    $form['about_me']['#type'] = 'fieldset';
    $form['about_me']['name']['#markup'] = '<p><strong>Name: </strong>'.$contact['display_name'].'</p>';
    $form['about_me']['birthdate']['#markup'] = '<p><strong>Birth date:</strong> '.$strBirthDate.'</p>';
    $form['about_me']['bank_help']['#markup'] = '<p><em>These are your personal bank details as registered in our system. Are the displayed data incorrect? Please send a message with the right data to sectorsupport@pum.nl</em></p>';
    $form['about_me']['bank_name']['#markup'] = '<p><strong>Bank name:</strong> '. $bankDetails['bank'] . '</p>';
    $form['about_me']['bic']['#markup'] = '<p><strong>BIC: </strong> ' . $bankDetails['bic'] . '</p>';
    $form['about_me']['iban']['#markup'] = '<p><strong>IBAN: </strong> ' . $bankDetails['iban'] . '</p>';
    $form['about_me']['type']['#type'] = 'select';
    $form['about_me']['type']['#title'] = 'Claim Role';
    $form['about_me']['type']['#required'] = true;
    $form['about_me']['type']['#options'] = $claim_types;
    $form['about_me']['type']['#description'] = 'Specify as who you submit this claim. E.g. Expert (PUM Main Activity), Sector Coordinator (SC), Country Coordinator (CC), etc.';
    $form['about_me']['link']['#type'] = 'select';
    $form['about_me']['link']['#title'] = 'Main Activity/Case';
    $form['about_me']['link']['#required'] = false;
    $form['about_me']['link']['#options'] = $link_options;
    $form['about_me']['link']['#description'] = 'The activities are related to a Main/Activity, please select the specific Main/Activity (pull down menu) from the list.';
    $form['about_me']['link']['#states'] = array(
      'visible' => array(
        'select#edit-type' => array('value' => 'project'),
      ),
      'required' => array(
        'select#edit-type' => array('value' => 'project'),
      ),
    );

    $form['about_me']['description']['#type'] = 'textfield';
    $form['about_me']['description']['#title'] = 'Description';
    $form['about_me']['description']['#required'] = true;
    $form['about_me']['description']['#description'] = 'Please enter a free description that reflects the spendingâ€™s that you claim. You also will see this description in your personal overview of the submitted claims.';

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Save and continue'),
    );

    return $form;
}

function pum_claims_form_submit($form, &$form_state) {
    global $user;
    civicrm_initialize();
    $contact_id = civicrm_api3('UFMatch', 'getvalue', array(
        'uf_id' => $user->uid,
        'return' => 'contact_id'
    ));

    $expenseDate = new DateTime();
    $params['expense_date'] = $expenseDate->format("Ymd");
    $params['claim_type'] = $form_state['values']['type'];
    $params['claim_contact_id'] = $contact_id;
    if($params['claim_type']=='project') {
      $params['claim_link'] = $form_state['values']['link'];
    }
    $params['claim_total_amount'] = 0;
    $params['claim_description'] = $form_state['values']['description'];
    $result = civicrm_api3('Claim', 'create', $params);
    $claim_id = $result['values']['id'];
    drupal_goto('portal/claims/'.$claim_id, array('fragment' => 'edit-lines'));
}

function pum_claims_view($claim_id) {
    global $user;
    civicrm_initialize();
    $contact_id = civicrm_api3('UFMatch', 'getvalue', array(
        'uf_id' => $user->uid,
        'return' => 'contact_id'
    ));

    drupal_add_js(drupal_get_path('module', 'pum_claims') . '/pum_claims.js');
    drupal_add_css(drupal_get_path('module', 'pum_claims') . '/pum_claims.css');

    $claim = civicrm_api3('Claim', 'getsingle', array('id' => $claim_id));

    $attachmentRows = array();
    $attachments = CRM_Core_BAO_File::getEntityFile('civicrm_activity', $claim_id);
    foreach($attachments as $attachment) {
        $attachmentRow = array();
        $attachmentRow[] = $attachment['href'];
        $attachmentRows[] = $attachmentRow;
    }

    $lines = _pum_claims_getClaimLines($claim_id);
    $approved = pum_claims_is_claim_approved($claim_id);
    $lineitemRows = array();
    $totalAmount = 0.00;
    foreach($lines as $line) {
        $amount_submitted = $line['euro_amount'];
        $euro_amount = $line['euro_amount'];
        $euro_amount = 'EUR ' . number_format($euro_amount, 2, '.', ',');
        $lineLog = '';
        $lineLogItems = civicrm_api3('ClaimLineLog', 'get', array('claim_line_id' => $line['id'], 'options' => array('limit' => 0)));
        foreach ($lineLogItems['values'] as $lineLogItem) {
          $logDate = new DateTime($lineLogItem['changed_date']);
          $lineLog .= '<p>'.$logDate->format('Y-m-d').': '.$lineLogItem['change_reason'].'</p>';
        }
        if (strlen($lineLog)) {
          $euro_amount = '<span class="line-amount-eur">'.$euro_amount.'&nbsp;<span class="helpicon">&nbsp;</span> <div style="display: none;" class="line-log">'.$lineLog.'</div></span>';
        }

        $line_log_items = CRM_Core_DAO::executeQuery("SELECT * FROM pum_claim_line_log WHERE claim_line_id = %1 ORDER BY changed_date DESC LIMIT 1", array(1=>array($line['id'], 'Integer')));
        if ($line_log_items->fetch() && isset($line_log_items->old_euro_amount)) {
          $amount_submitted = $line_log_items->old_euro_amount;
        }

        $lineitemRow = array();
        $lineitemRow[] = $line['expense_date'];
        $lineitemRow[] = $line['expense_type'];
        $lineitemRow[] = $line['currency'] . ' ' . number_format($line['currency_amount'], 2, '.', ',');
        $lineitemRow[] = 'EUR '.number_format($amount_submitted, 2, '.', ',');
        $lineitemRow[] = $approved ? $euro_amount : null;
        $lineitemRow[] = $line['description'];
        $lineitemRows[] = $lineitemRow;

        $totalAmount = $totalAmount + ((float) $line['euro_amount']);
    }



    $contact = civicrm_api3('Contact', 'getsingle', array('id' => $contact_id));
    $bankDetails = _pum_claims_getBankDetailsOfContact($contact_id);

    $strBirthDate = '';
    if (!empty($contact['birth_date'])) {
        $dateBirthDate = new DateTime($contact['birth_date']);
        $strBirthDate = $dateBirthDate->format('Y-m-d');
    }

    $claim_types = _pum_claims_getClaimTypes();
    $link_options = _pum_claims_getClaimLinksForContact($contact_id);

    $form = array();
    $form['about_me']['#type'] = 'fieldset';
    $form['about_me']['name']['#markup'] = '<p><strong>Name: </strong>'.$contact['display_name'].'</p>';
    $form['about_me']['birthdate']['#markup'] = '<p><strong>Birth date:</strong> '.$strBirthDate.'</p>';
    $form['about_me']['bank_name']['#markup'] = '<p><strong>Bank name:</strong> '.$bankDetails['bank'].'</p>';
    $form['about_me']['bic']['#markup'] = '<p><strong>BIC:</strong> '.$bankDetails['bic'].'</p>';
    $form['about_me']['iban']['#markup'] = '<p><strong>IBAN:</strong> '.$bankDetails['iban'].'</p>';
    $form['about_me']['type']['#markup'] = '<p><strong>Claim Role:</strong> '.$claim_types[$claim['claim_type_id']].'</p>';
    if(isset($claim['claim_linked_to'])) {
      $form['about_me']['link']['#markup'] = '<p><strong>Link:</strong> ' . $link_options[$claim['claim_linked_to']] . '</p>';
    }
    $form['about_me']['description']['#markup'] = '<p><strong>Description:</strong> '.$claim['claim_description'].'</p>';

    $form['lines']['#type'] = 'fieldset';
    $form['lines']['#title'] = 'My expenses';

    if (count($lineitemRows)) {
        $form['lines']['table']['#theme'] = 'table';
        $form['lines']['table']['#header'] = array(
            'Date',
            'Expense type',
            'Amount',
            'Amount submitted',
            'Amount approved',
            'Description',
        );
        $form['lines']['table']['#attributes'] = array('width' => '100%');
        $form['lines']['table']['#rows'] = $lineitemRows;
        $form['lines']['total']['#markup'] = '<strong>Total: </strong>EUR '.number_format($totalAmount, 2, ',', '.');
    }

    $form['attachments']['#type'] = 'fieldset';
    $form['attachments']['#title'] = 'My attachments (invoices, train tickets etc.)';

    if (count($attachmentRows)) {
        $form['attachments']['table']['#theme'] = 'table';
        $form['attachments']['table']['#rows'] = $attachmentRows;
        $form['attachments']['table']['#attributes'] = array('width' => '100%');
    }

    return $form;
}

function pum_claims_edit_form($form, &$form_state, $claim_id) {
    global $user;

    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }

    civicrm_initialize();
    $contact_id = civicrm_api3('UFMatch', 'getvalue', array(
        'uf_id' => $user->uid,
        'return' => 'contact_id'
    ));

    $claim = civicrm_api3('Claim', 'getsingle', array('id' => $claim_id));

    $attachmentRows = array();
    $attachments = CRM_Core_BAO_File::getEntityFile('civicrm_activity', $claim_id);
    foreach($attachments as $attachment) {
        $removeLink = '<a href="'.url('portal/claims/'.$claim_id.'/remove-attachment/'.$attachment['fileID'], array('absolute' => true)).'">Remove</a>';
        $attachmentRow = array();
        $attachmentRow[] = $attachment['href'];
        $attachmentRow[] = $removeLink;
        $attachmentRows[] = $attachmentRow;
    }

    $lines = _pum_claims_getClaimLines($claim_id);
    $lineitemRows = array();
    $totalAmount = 0.00;
    foreach($lines as $line) {
        $editLink = '<a href="'.url('portal/claims/'.$claim_id.'/edit-line/'.$line['id']).'" title="Through this button you enter the sequel screen and you can customize the data entered">Edit</a>';
        $removeLink = '<a href="'.url('portal/claims/'.$claim_id.'/remove-line/'.$line['id']).'" title="Through this button you can delete the imported rule">Remove</a>';

        $lineitemRow = array();
        $lineitemRow[] = $line['expense_date'];
        $lineitemRow[] = $line['expense_type'];
        $lineitemRow[] = $line['currency'];
        $lineitemRow[] = $line['currency_amount'];
        $lineitemRow[] = $line['euro_amount'];
        $lineitemRow[] = $line['description'];
        $lineitemRow[] = $editLink.'&nbsp;'.$removeLink;
        $lineitemRows[] = $lineitemRow;

        $totalAmount = $totalAmount + ((float) $line['euro_amount']);
    }

    $contact = civicrm_api3('Contact', 'getsingle', array('id' => $contact_id));
    $bankDetails = _pum_claims_getBankDetailsOfContact($contact_id);

    $strBirthDate = '';
    if (!empty($contact['birth_date'])) {
        $dateBirthDate = new DateTime($contact['birth_date']);
        $strBirthDate = $dateBirthDate->format('Y-m-d');
    }

    $claim_types = _pum_claims_getClaimTypes();
    $link_options = _pum_claims_getClaimLinksForContact($contact_id);

    $form['claim_id']['#type'] = 'hidden';
    $form['claim_id']['#value'] = $claim_id;

    $form['about_me']['#type'] = 'fieldset';
    $form['about_me']['name']['#markup'] = '<p><strong>Name: </strong>'.$contact['display_name'].'</p>';
    $form['about_me']['birthdate']['#markup'] = '<p><strong>Birth date:</strong> '.$strBirthDate.'</p>';
    $form['about_me']['bank_help']['#markup'] = '<p><em>These are your personal bank details as registered in our system. Are the displayed data incorrect? Please send a message with the right data to sectorsupport@pum.nl</em></p>';
    $form['about_me']['bank_name']['#markup'] = '<p><strong>Bank name:</strong> '. $bankDetails['bank'] . '</p>';
    $form['about_me']['bic']['#markup'] = '<p><strong>BIC: </strong> ' . $bankDetails['bic'] . '</p>';
    $form['about_me']['iban']['#markup'] = '<p><strong>IBAN: </strong> ' . $bankDetails['iban'] . '</p>';
    $form['about_me']['type']['#type'] = 'select';
    $form['about_me']['type']['#title'] = 'Claim Role';
    $form['about_me']['type']['#required'] = true;
    $form['about_me']['type']['#default_value'] = $claim['claim_type_id'];
    $form['about_me']['type']['#options'] = $claim_types;
    $form['about_me']['type']['#description'] = 'Specify as who you submit this claim. E.g. Expert (PUM Main Activity), Sector Coordinator (SC), Country Coordinator (CC), etc.';

    $form['about_me']['link']['#type'] = 'select';
    $form['about_me']['link']['#title'] = 'Main Activity/Case';
    if($claim['claim_type_id']=='project') {
      $form['about_me']['link']['#default_value'] = $claim['claim_linked_to'];
    }   
    $form['about_me']['link']['#options'] = $link_options;
    $form['about_me']['link']['#description'] = 'The activities are related to a Main Actity/Case, please select the specific Main/Activity (pull down menu) from the list.';
    $form['about_me']['link']['#states'] = array(
      'visible' => array(
        'select#edit-type' => array('value' => 'project'),
      ),
      'required' => array(
        'select#edit-type' => array('value' => 'project'),
      ),
    );
    $form['about_me']['description']['#type'] = 'textfield';
    $form['about_me']['description']['#title'] = 'Description';
    $form['about_me']['description']['#required'] = true;
    $form['about_me']['description']['#default_value'] = $claim['claim_description'];
    $form['about_me']['description']['#description'] = 'Please enter a free description that reflects the spendingâ€™s that you claim. You also will see this description in your personal overview of the submitted claims.';

    $form['lines']['#type'] = 'fieldset';
    $form['lines']['#title'] = 'My expenses';
    $form['lines']['new-line']['#type'] = 'markup';
    $form['lines']['new-line']['#markup'] = '<p><a href="/portal/claims/'.$claim_id.'/add-line" class="button" title="Through this button you enter the sequel screen, in which you can enter a line.">Add expense line</a></p>';

    if (count($lineitemRows)) {
        $form['lines']['table']['#theme'] = 'table';
        $form['lines']['table']['#header'] = array(
            'Date',
            'Expense type',
            'Currency',
            'Amount',
            'Amount EUR',
            'Description',
            '',
        );
        $form['lines']['table']['#attributes'] = array('width' => '100%');
        $form['lines']['table']['#rows'] = $lineitemRows;
        $form['lines']['total']['#markup'] = '<strong>Total: </strong>EUR '.number_format($totalAmount, 2, ',', '.');
    }

    $form['attachments']['#type'] = 'fieldset';
    $form['attachments']['#title'] = 'My attachments (invoices, train tickets etc.)';
    if (count($attachmentRows)) {
        $form['attachments']['table']['#theme'] = 'table';
        $form['attachments']['table']['#rows'] = $attachmentRows;
        $form['attachments']['table']['#attributes'] = array('width' => '100%');
    }
    $form['attachments']['upload']['#prefix'] = '<div class="upload">';
    $form['attachments']['upload']['#suffix'] = '</div>';
    $form['attachments']['upload']['explanation']['#markup'] = '<p class="description">Please upload one or more attachments</p>';
    $form['attachments']['upload']['file']['#title'] = t('File');
    $form['attachments']['upload']['file']['#type'] = 'file';
    $form['attachments']['upload']['file']['#description'] = "Via this button files (attachments) can be selected which you would like to add to the Claim. Use the button to 'Upload' to attach each file";
    $form['attachments']['upload']['button']['#type'] = 'submit';
    $form['attachments']['upload']['button']['#value'] = 'Upload';
    $form['attachments']['upload']['button']['#submit'] = array('pum_claims_form_submit_attachments');
    $form['attachments']['upload']['button']['#validate'] = array();
    $form['attachments']['upload']['button']['#attributes']['title'] = "Via this button files (attachments) can be selected which you would like to add to the Claim. Use the button to 'Upload' to attach each file";

    $form['agree']['#type'] = 'fieldset';
    $form['agree']['agree']['#type'] = 'checkbox';
    $form['agree']['agree']['#required'] = FALSE;
    $form['agree']['agree']['#title'] = 'All items submitted I have filled out in good faith and with all possible attachments.';

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#attributes' => array(
          'title' => 'Via this button the entered data is stored and forwarded for approval',
        ),
    );


    return $form;
}

function pum_claims_edit_form_submit($form, &$form_state) {
    global $user;

    $claim_id = $form_state['values']['claim_id'];
    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }

    civicrm_initialize();
    $contact_id = civicrm_api3('UFMatch', 'getvalue', array(
        'uf_id' => $user->uid,
        'return' => 'contact_id'
    ));

    $expenseDate = new DateTime();
    if ($claim_id) {
        $params['id'] = $claim_id;
    }

    $params['expense_date'] = $expenseDate->format("Ymd");
    $params['claim_type'] = $form_state['values']['type'];
    $params['claim_contact_id'] = $contact_id;
    /* only a project needs a claim link */
    if($params['claim_type']=='project') {
      $params['claim_link'] = $form_state['values']['link'];
    }
    $params['claim_total_amount'] = 0;
    $params['claim_description'] = $form_state['values']['description'];
    $result = civicrm_api3('Claim', 'create', $params);
    $claim_id = $result['values']['id'];
    if($form_state['values']['agree']){
      $result = civicrm_api3('Claim', 'submit', $params);
    }
    drupal_goto('portal/claims');
    //drupal_goto('portal/claims/'.$claim_id);
}

function pum_claims_form_submit_attachments($form, &$form_state) {
    $claim_id = $form_state['values']['claim_id'];
    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }

    civicrm_initialize();
    $file = file_save_upload('file', array(
        'file_validate_extensions' => array('gif png jpg jpeg txt rtf odf pdf doc docx ppt pptx xls xlsx'),
        'file_validate_size' => array(10*1024*1024),
    ));
    if ($file) {
        $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
        $filepath = $wrapper->realpath();
        pum_claims_copy_file_to_activity($filepath, $file->filemime, $claim_id);
    }

    drupal_goto('portal/claims/'.$claim_id, array('fragment' => 'edit-lines'));
}

function pum_claims_remove_attachment($claim_id, $file_id) {
    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }
    civicrm_initialize();
    CRM_Core_BAO_File::deleteEntityFile('civicrm_activity', $claim_id, NULL, $file_id);
    drupal_goto('portal/claims/'.$claim_id, array('fragment' => 'edit-lines'));
}

function pum_claims_copy_file_to_activity($file, $mimeType, $activity_id) {
    $config = CRM_Core_Config::singleton();

    $path = explode('/', $file);
    $filename = $path[count($path) - 1];
    $directoryName = $config->customFileUploadDir;
    CRM_Utils_File::createDir($directoryName);

    if (!copy($file, $directoryName . DIRECTORY_SEPARATOR . $filename)) {
        throw new CRM_Documents_Exception_FileCopy('Could not copy file from '.$file.' to '.$directoryName . DIRECTORY_SEPARATOR . $filename);
    }

    $entityTable = 'civicrm_activity';
    $entityID = $activity_id;

    list($sql, $params) = CRM_Core_BAO_File::sql($entityTable, $entityID, 0);

    $dao = CRM_Core_DAO::executeQuery($sql, $params);
    $dao->fetch();

    $fileDAO = new CRM_Core_DAO_File();
    $op = 'create';
    if (isset($dao->cfID) && $dao->cfID) {
        $op = 'edit';
        $fileDAO->id = $dao->cfID;
        unlink($directoryName . DIRECTORY_SEPARATOR . $dao->uri);
    }

    $fileDAO->uri = $filename;
    $fileDAO->mime_type = $mimeType;
    $fileDAO->upload_date = date('Ymdhis');
    $fileDAO->save();

    // need to add/update civicrm_entity_file
    $entityFileDAO = new CRM_Core_DAO_EntityFile();
    if (isset($dao->cefID) && $dao->cefID) {
        $entityFileDAO->id = $dao->cefID;
    }
    $entityFileDAO->entity_table = $entityTable;
    $entityFileDAO->entity_id = $entityID;
    $entityFileDAO->file_id = $fileDAO->id;
    $entityFileDAO->save();

    // lets call the post hook here so attachments code can do the right stuff
    CRM_Utils_Hook::post($op, 'File', $fileDAO->id, $fileDAO);
}

function pum_claims_line_form($form, &$form_state, $claim_id, $line_id=false) {

    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }

    drupal_add_js(array('pum_claims' => array('currencyConvertUrl' => url('portal/claims/convert_currency'))), 'setting');
    drupal_add_js(drupal_get_path('module', 'pum_claims') . '/pum_claims.js');
    drupal_add_css(drupal_get_path('module', 'pum_claims') . '/pum_claims.css');

    civicrm_initialize();

    $line_types = _pum_claims_getClaimLineTypes();
    $currencies = _pum_claims_get_civicrm_currencies();

    $line = array();
    $line['expense_date'] = '';
    $line['currency_id'] = null;
    $line['currency_amount'] = '';
    $line['euro_amount'] = '0.00';
    $line['description'] = '';
    $line['expense_type'] = null;
    if ($line_id) {
        $line = civicrm_api3('ClaimLine', 'getsingle', array('id' => $line_id));
        $expenseDate = new DateTime($line['expense_date']);
        $line['expense_date'] = $expenseDate->format('Y-m-d');
    }

    $form['claim_id']['#type'] = 'hidden';
    $form['claim_id']['#value'] = $claim_id;

    $form['line_id']['#type'] = 'hidden';
    $form['line_id']['#value'] = $line_id;

    $form['line']['#type'] = 'fieldset';
    $form['line']['expense_date']['#type'] = 'date_popup';
    $form['line']['expense_date']['#title'] = 'Date expense incurred';
    $form['line']['expense_date']['#date_label_position'] = 'before';
    $form['line']['expense_date']['#required'] = TRUE;
    $form['line']['expense_date']['#date_format'] = 'Y-m-d';
    $form['line']['expense_date']['#date_increment'] = 1;
    $form['line']['expense_date']['#date_year_range'] = '-2:0';
    $form['line']['expense_date']['#datepicker_options']['maxDate'] = '+0d';
    $form['line']['expense_date']['#default_value'] = $line['expense_date'];
    $form['line']['expense_date']['#description'] = 'On the basis of a calendar, select the date on which the expenditure occurred.';

    $form['line']['type']['#type'] = 'select';
    $form['line']['type']['#title'] = 'Claim line type';
    $form['line']['type']['#required'] = true;
    $form['line']['type']['#options'] = $line_types;
    $form['line']['type']['#default_value'] = $line['expense_type'];
    $form['line']['type']['#description'] = 'The claim line type is used to categorize the costs for administrative purposes. Please make a selection from the options in the pull-down menu.';

    $form['line']['currency']['#type'] = 'select';
    $form['line']['currency']['#title'] = 'Currency';
    $form['line']['currency']['#required'] = true;
    $form['line']['currency']['#options'] = $currencies;
    $form['line']['currency']['#default_value'] = $line['currency_id'];
    $form['line']['currency']['#description'] = 'Please make a selection from the options in the pull-down menu.';

    $form['line']['amount']['#type'] = 'textfield';
    $form['line']['amount']['#title'] = 'Amount (in currency)'; // @todo validation for right fornmat
    $form['line']['amount']['#required'] = true;
    $form['line']['amount']['#default_value'] = $line['currency_amount'];
    $form['line']['amount']['#description'] = 'Enter the amount of the note, in the respective currency';

    $form['line']['eur_amount']['#markup'] = '<p>Amount in EUR: <span id="euro-amount">'.$line['euro_amount'].'</span></p>';

    $form['line']['description']['#type'] = 'textfield';
    $form['line']['description']['#title'] = 'Description';
    $form['line']['description']['#required'] = true;
    $form['line']['description']['#default_value'] = $line['description'];
    $form['line']['description']['#description'] = 'Please enter a short description of the expenditure occurred';

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
    );

    $form['#validate'][] = 'pum_claims_line_form_validate';

    return $form;
}

function pum_claims_line_form_validate($form, &$form_state) {
  $expense_date = new DateTime($form_state['values']['expense_date']);
  $now = new DateTime();
  if ($expense_date > $now) {
    form_set_error('expense_date', 'You cannot enter an expense line in the future.');
  }
}

function pum_claims_line_form_submit($form, &$form_state) {
    $line_id = $form_state['values']['line_id'];
    $claim_id = $form_state['values']['claim_id'];
    $expenseDate = new DateTime($form_state['values']['expense_date']);
    $params = array();
    if ($line_id) {
        $params['id'] = $line_id;
    }

    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }

    $result = civicrm_api3('Currency', 'Convert', array(
        'currency_id' => $form_state['values']['currency'],
        'amount' => $form_state['values']['amount'],
        'conversion_date' => $expenseDate ->format('Ymd')
    ));

    $params['activity_id'] = $claim_id;
    $params['expense_date'] = $expenseDate->format('Ymd');
    $params['currency_id'] = $form_state['values']['currency'];
    $params['currency_amount'] = $form_state['values']['amount'];
    $params['euro_amount'] = $result['euro_amount'];
    $params['description'] = $form_state['values']['description'];
    $params['expense_type'] = $form_state['values']['type'];
    $params['exchange_rate'] = $result['exchange_rate'];
    civicrm_api3('ClaimLine', 'create', $params);
    drupal_goto('portal/claims/'.$claim_id, array('fragment' => 'edit-lines'));
}

function pum_claims_remove_line($claim_id, $line_id) {
    if (!pum_claims_is_claim_editable($claim_id)) {
        drupal_goto(url('portal/view-claim/'.$claim_id, array('absolute' => true)));
    }

    civicrm_initialize();
    $result = civicrm_api3('ClaimLine', 'Delete', array('id' => $line_id));
    drupal_goto('portal/claims/'.$claim_id, array('fragment' => 'edit-lines'));
}


/**
 * Check whether a drupal user has a certain role.
 *
 * @param array $roles
 * @return bool
 */
function pum_claims_user_has_role($roles = array())
{
    global $user;
    if (in_array('administrator', $user->roles)) {
        return true;
    }
    foreach ($roles as $role) {
        if (in_array($role, $user->roles)) {
            return TRUE;
        }
    }
    return FALSE;
}

function pum_claims_get_role_ids($roles) {
    $rids = array();
    $available_roles = user_roles();
    foreach($roles as $role) {
        $rid = array_search($role, $available_roles);
        if ($rid !== false) {
            $rids[$rid] = $rid;
        }
    }

    return $rids;
}

function _pum_claims_get_civicrm_currencies() {
    $return = array();
    $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_currency ORDER BY name ASC");
    while ($dao->fetch()) {
        $return[$dao->id] = $dao->name;
    }
    return $return;
}

function _pum_claims_getClaimLineTypes() {
    $types = array();

    $result = civicrm_api3('OptionValue', 'get', array('option_group_id' => 'pum_claim_line_type', 'option.limit' => 0));
    foreach($result['values'] as $value) {
        $types[$value['value']] = $value['label'];
    }
    return $types;
}

function _pum_claims_getClaimTypes() {
    $types = array();

    $result = civicrm_api3('OptionValue', 'get', array('option_group_id' => 'pum_claim_type', 'option.limit' => 0));
    foreach($result['values'] as $value) {
        $types[$value['value']] = $value['label'];
    }
    return $types;
}

/**
 * Find all cases in which the contact has a role.
 * Returns the contact number and a label/description for the case
 *
 * @param int $contact_id
 * @return array
 */
function _pum_claims_getClaimLinksForContact($contact_id) {
    return CRM_Expenseclaims_Utils::getClaimLinksForContact($contact_id);
}

/**
 * Returns all the claim lines for this claim
 *
 * @param $claim_id
 * @return array
 */
function _pum_claims_getClaimLines($claim_id) {
    $lines = array();
    $currencies = _pum_claims_get_civicrm_currencies();
    $types = _pum_claims_getClaimLineTypes();
    $result = civicrm_api3('ClaimLine', 'get', array('activity_id' => $claim_id, 'option.limit' => 0));
    foreach($result['values'] as $line) {
        $line['currency'] = $currencies[$line['currency_id']];
        $line['expense_type'] = $types[$line['expense_type']];
        $lines[] = $line;
    }
    return $lines;
}

function _pum_claims_updateBankDetailsOfContact($contact_id, $bank, $iban, $bic) {
    $bankInformationCustomGroup = civicrm_api3('CustomGroup', 'getsingle', array('name' => 'Bank_Information'));
    $bankInformationCustomGroupId = $bankInformationCustomGroup['id'];
    $bankNameCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'Bank_Name', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));
    $IBANCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'IBAN_nummer', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));
    $BICCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'BIC_Swiftcode', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));

    $params['id'] = $contact_id;
    $params['custom_'.$bankNameCustomFieldId] = $bank;
    $params['custom_'.$IBANCustomFieldId] = $iban;
    $params['custom_'.$BICCustomFieldId] = $bic;

    civicrm_api3('Contact', 'create', $params);
}

function _pum_claims_getBankDetailsOfContact($contact_id) {
    $bankInformationCustomGroup = civicrm_api3('CustomGroup', 'getsingle', array('name' => 'Bank_Information'));
    $bankInformationCustomGroupId = $bankInformationCustomGroup['id'];
    $bankNameCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'Bank_Name', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));
    $IBANCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'IBAN_nummer', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));
    $BICCustomFieldId = civicrm_api3('CustomField', 'getvalue', array('name' => 'BIC_Swiftcode', 'custom_group_id' => $bankInformationCustomGroupId, 'return' => 'id'));

    $contact = civicrm_api3('Contact', 'getsingle', array(
        'id' => $contact_id,
        'return' => array('custom_'.$bankNameCustomFieldId, 'custom_'.$IBANCustomFieldId, 'custom_'.$BICCustomFieldId),
    ));

    $return['bank'] = '';
    $return['iban'] = '';
    $return['bic'] = '';
    if (isset($contact['custom_'.$bankNameCustomFieldId])) {
        $return['bank'] = $contact['custom_'.$bankNameCustomFieldId];
    }
    if (isset($contact['custom_'.$IBANCustomFieldId])) {
        $return['iban'] = $contact['custom_'.$IBANCustomFieldId];
    }
    if (isset($contact['custom_'.$BICCustomFieldId])) {
        $return['bic'] = $contact['custom_'.$BICCustomFieldId];
    }

    return $return;
}